// socket IO 实时通信 TCP 应该如何去优化变编写代码
// docker 网络该如何配置？
// OSI 由下向上
// 1. 物理层  电缆、光纤 
// 2. 数据链路层  到达网卡之后如果流动 交换机直接如何流动 物理层拿到信号（光）-》转换成二进制机器语言
//    与ARP RARP进行交互 获取对方的物理（硬件）地址Mac地址；
//    tcpdump linux抓包wireshock
//    ARP协议；广播，发一个协议包，把空的目的Mac地址发过去；高速缓存；一般首次通信才会调用；
//    获得目的端的32位IP地址和48位Mac地址；
//    拿IP地址去网络上询问？目的IP地址收到后会回复自己的Mac地址；同一个网段内一般；
//    如果不在同一个网段，一般有路由去询问；
//    默认最长等待时长75s
//    ARP攻击：伪装自己的Mac地址；
//    ens33网络接口


//    交换机（内网走的是万兆交换机） 
//    处理与物流设备交互的具体细节
// 3. 网络层  IP协议属于网络层 很多数据包；IP包；负责包的流动和转移；路由;
//    数据在网络中分组传输，网络层处理分组在网络中的活动
// 4. 传输层  TCP 保证包可靠地传输； UDP协议
//    处理端到端的通信细节（端口到端口）
// 5. 会话层  session/cookie
// 6. 表示层
// 7. 应用层  HTTP 协议ngix 转发处理  SMTP FTP TELNET SNMP
//    处理网络数据与应用程序的交互细节

// 软件开发者关注的 2 3 4 7

// TCP/IP 封包和拆包的过程
